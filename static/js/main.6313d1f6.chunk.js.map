{"version":3,"sources":["Nav/Nav.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Nav","className","href","App","useState","style","color","fontsize","margin","colorSet","setColor","role","aria-label","onClick","newStyle","disabled","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAeeA,G,MAXH,WACR,OACI,wBAAIC,UAAU,OACV,4BAAI,uBAAGA,UAAU,SAASC,KAAK,SAA3B,SACJ,4BAAI,uBAAGA,KAAK,UAAR,UACJ,4BAAI,uBAAGA,KAAK,aAAR,aACJ,4BAAI,uBAAGA,KAAK,YAAR,e,kOCkDDC,MAxDf,WAAgB,IAAD,EACaC,mBAAS,CACjCC,MAAO,CAACC,MAAO,QAASC,SAAU,OAAQC,OAAQ,QAClDC,UAAU,IAHC,mBACNJ,EADM,KACCK,EADD,KAYb,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,MACA,4BAAQA,UAAU,cAEhB,yBAAKA,UAAU,aACb,uBAAGI,MAAOA,EAAMA,OAAhB,SAA6B,0BAAMM,KAAK,MAAMC,aAAW,aAA5B,gBAA7B,KAAgF,6BAAhF,qCACA,6BAEE,uBAAGX,UAAU,oBAAb,oEAGA,4BAAQY,QAjBE,WAClB,IAAMC,E,qVAAQ,IAAOT,EAAMA,MAAb,CAAoBC,MAAO,SACzCI,EAAS,CAACL,MAAOS,EAAUL,UAAU,KAeCM,SAAUV,EAAMI,UAA9C,mCAKJ,yBAAKR,UAAU,YAAYe,GAAG,SAC5B,0CACA,6bACA,mLAGF,yBAAKf,UAAU,YAAYe,GAAG,YAC9B,wCACA,kIACE,yBAAKf,UAAU,eACb,yBAAKA,UAAU,eAAf,aACA,yBAAKA,UAAU,eAAf,aACA,yBAAKA,UAAU,eAAf,eAIJ,yBAAKA,UAAU,YAAYe,GAAG,WAC9B,uCACA,iECvCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6313d1f6.chunk.js","sourcesContent":["import React from 'react';\nimport './Nav.css';\n\n\nconst Nav = () => {\n    return (\n        <ul className=\"nav\">\n            <li><a className=\"active\" href=\"#home\">Home</a></li>\n            <li><a href=\"#about\">About</a></li>\n            <li><a href=\"#projects\">Projects</a></li>\n            <li><a href=\"#connect\">Connect</a></li>\n        </ul>\n    )\n}\n\nexport default Nav;","import React, {useState} from 'react';\nimport Nav from './Nav/Nav';\nimport './App.css';\n\nfunction App() {\n  const [style, setColor] = useState({\n    style: {color: 'white', fontsize: 'bold', margin: \"50px\"},\n    colorSet: false\n  })\n\n  // change color\n  const changeStyle = () => {\n    const newStyle = {...style.style, color: 'pink'};\n    setColor({style: newStyle, colorSet: true});\n  }\n\n  return (\n    <div className=\"App\">\n      <Nav />\n      <header className=\"App-header\">\n\n        <div className=\"App-intro\">\n          <p style={style.style}>Hello <span role=\"img\" aria-label=\"hand wave\">ðŸ‘‹</span>! <br/> I'm Dana Ng a Frontend Engineer.</p>\n          <div>\n\n            <p className=\"App-smallContent\">\n              This site was built using react and react hooks, and typescript.\n            </p>\n            <button onClick={changeStyle} disabled={style.colorSet}>\n            Change Style with React Hooks\n            </button>\n          </div>\n        </div>\n        <div className=\"App-block\" id=\"about\">\n          <h2>About Dana</h2>\n          <p>I am a frontend engineer who builds UI features using JavaScript, CSS and HTML. I use technologies such as React, Sass, GraphQL, and Redux daily. I unit test with Jest and Enzyme, as well as use flow type + eslint for static analysis. I continue to hone my skills by learning about web performance, accessibility, typescript, nodejs, plus improving my computer science knowledge in data structures and algorithms. </p>\n          <p>Not only do I enjoy web development, I also am a minimalist, foodie, international traveller, language lover, and enjoy strength training + soccer.</p>\n        </div>\n\n        <div className=\"App-block\" id=\"projects\">\n        <h2>Projects</h2>\n        <p>The following will be display of some of my most recent projects to demonstrate my frontend skills.</p>\n          <div className=\"App-gallery\">\n            <div className=\"App-project\">Project 1</div>\n            <div className=\"App-project\">Project 2</div>\n            <div className=\"App-project\">Project 3</div>\n          </div>\n        </div>\n\n        <div className=\"App-block\" id=\"connect\">\n        <h2>Connect</h2>\n        <p>\n        linkedin | github | angel list\n        </p>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}