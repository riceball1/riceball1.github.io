{"version":3,"sources":["styles/theme.js","styles/global.js","styles/ToggleButton/ToggleButton.js","App/App.tsx","serviceWorker.js","index.tsx"],"names":["lightTheme","body","text","toggleBorder","gradient","darkTheme","GlobalStyles","createGlobalStyle","theme","CheckBoxWrapper","styled","div","CheckBoxLabel","label","CheckBox","input","App","useState","setTheme","htmlFor","id","type","onChange","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAGaA,EAAa,CACtBC,KAAM,UACNC,KAAM,UACNC,aAAc,OACdC,SAAU,qCAIDC,EAAY,CACrBJ,KAAM,UACNC,KAAM,UACNC,aAAc,UACdC,SAAU,qC,ihBCTP,IAAME,EAAeC,YAAH,IAQV,qBAAGC,MAAkBN,MAKlB,qBAAGM,MAAkBP,MAC1B,qBAAGO,MAAkBN,O,m7BChB3B,IAAMO,EAAkBC,IAAOC,IAAV,KAGfC,EAAgBF,IAAOG,MAAV,KAqBbC,EAAWJ,IAAOK,MAAV,IAMLH,G,MCMDI,MAhCf,WAAgB,IAAD,EAEaC,mBAAS,SAFtB,mBAENT,EAFM,KAECU,EAFD,KASb,OACE,kBAAC,IAAD,CAAeV,MAAiB,UAAVA,EAAoBR,EAAaK,GACvD,oCACE,kBAACC,EAAD,MACA,6BACE,kBAACG,EAAD,KACE,kBAACG,EAAD,CAAeO,QAAQ,aACvB,kBAACL,EAAD,CAAUM,GAAG,WAAWC,KAAK,WAAWC,SAX5B,WAClBJ,EAAmB,UAAVV,EAAoB,OAAS,YAWhC,qCAAOA,EAAP,WAEF,8CAAoBA,EAApB,UACA,qDAA0B,uBAAGe,KAAK,uCAAuCC,OAAO,SAASC,IAAI,uBAAnE,YAA1B,KACA,wDACA,+DACA,4DACA,yECpBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.64debd33.chunk.js","sourcesContent":["// theme file for dark and light mode\n\n\nexport const lightTheme = {\n    body: '#E2E2E2',\n    text: '#363537',\n    toggleBorder: '#FFF',\n    gradient: 'linear-gradient(#39598A, #79D7ED)',\n}\n\n\nexport const darkTheme = {\n    body: '#363537',\n    text: '#FAFAFA',\n    toggleBorder: '#6B8096',\n    gradient: 'linear-gradient(#091236, #1E215D)'\n}","// global.js\n// Source: https://github.com/maximakymenko/react-day-night-toggle-app/blob/master/src/global.js#L23-L41\n\n\nimport { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyles = createGlobalStyle`\n  *,\n  *::after,\n  *::before {\n    box-sizing: border-box;\n  }\n\n  a {\n      color: ${({ theme }) => theme.text};\n  }\n\n  body {\n    align-items: center;\n    background: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.text};\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    height: 100vh;\n    margin: 0;\n    padding: 0;\n    font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;\n    transition: all 0.25s linear;\n  }`","// Source: https://codesandbox.io/s/6v7n1vr8yn\n\nimport styled from 'styled-components';\n\nexport const CheckBoxWrapper = styled.div`\n  position: relative;\n`;\nexport const CheckBoxLabel = styled.label`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 42px;\n  height: 26px;\n  border-radius: 15px;\n  background: #bebebe;\n  cursor: pointer;\n  &::after {\n    content: \"\";\n    display: block;\n    border-radius: 50%;\n    width: 18px;\n    height: 18px;\n    margin: 3px;\n    background: #ffffff;\n    box-shadow: 1px 3px 3px 1px rgba(0, 0, 0, 0.2);\n    transition: 0.2s;\n  }\n`;\nexport const CheckBox = styled.input`\n  opacity: 0;\n  z-index: 1;\n  border-radius: 15px;\n  width: 42px;\n  height: 26px;\n  &:checked + ${CheckBoxLabel} {\n    background: #4fbe79;\n    &::after {\n      content: \"\";\n      display: block;\n      border-radius: 50%;\n      width: 18px;\n      height: 18px;\n      margin-left: 21px;\n      transition: 0.2s;\n    }\n  }\n`;","import React, {useState} from 'react';\nimport {ThemeProvider} from 'styled-components';\nimport {lightTheme, darkTheme} from '../styles/theme';\nimport {GlobalStyles} from '../styles/global';\nimport {CheckBoxWrapper, CheckBox, CheckBoxLabel} from '../styles/ToggleButton/ToggleButton';\nimport './App.scss';\n\n// The main entry point of my website\nfunction App() {\n\n  const [theme, setTheme] = useState('light');\n\n  // toggle between dark and light theme\n  const toggleTheme = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light');\n  }\n\n  return (\n    <ThemeProvider theme={theme === 'light' ? lightTheme : darkTheme}>\n    <>\n      <GlobalStyles />\n      <div>\n        <CheckBoxWrapper>\n          <CheckBoxLabel htmlFor=\"checkbox\"/>\n          <CheckBox id=\"checkbox\" type=\"checkbox\" onChange={toggleTheme}/>\n          <p>{`${theme} mode`}</p>\n        </CheckBoxWrapper>\n        <h1>Welcome to the {theme} side!</h1>\n        <p>This is the website of <a href=\"https://www.linkedin.com/in/danafng/\" target=\"_blank\" rel=\"noopener noreferrer\">Dana Ng.</a> </p> \n        <p>I'm a frontend engineer. </p>\n        <p>Currently located in Boston, MA.</p>\n        <p>I'm learning some new stuff. </p> \n        <p> Can't wait to make more improvements.</p>\n        \n        </div>\n    </>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}